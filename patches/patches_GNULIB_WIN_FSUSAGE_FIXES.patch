diff --git a/ChangeLog b/ChangeLog
index f386e9a579..252f302a59 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,118 +1,3 @@
-2023-08-14  Bruno Haible  <bruno@clisp.org>
-
-	readutmp, boot-time: Don't use __UT_* symbols (regression 2023-08-11).
-	* lib/readutmp.h (_GL_UT_USER_SIZE, _GL_UT_ID_SIZE, _GL_UT_LINE_SIZE,
-	_GL_UT_HOST_SIZE): New macros.
-	(struct utmpx32): Use them.
-
-2023-08-14  Bruno Haible  <bruno@clisp.org>
-
-	readutmp, boot-time: Fix build on 32-bit glibc (regression 2023-08-11).
-	Reported by Andreas Schwab <schwab@suse.de> in
-	<https://lists.gnu.org/archive/html/bug-gnulib/2023-08/msg00125.html>.
-	* lib/readutmp.h (struct utmpx32): Reference __UT_NAMESIZE, not
-	__UT_USERSIZE.
-
-2023-08-13  Bruno Haible  <bruno@clisp.org>
-
-	stdint: Fix configure test result with gcc 4.7 or 4.8.
-	* m4/stdint.m4 (gl_STDINT_H): Don't assume that _Generic works with
-	GCC versions < 4.9 with -std=gnu11.
-
-2023-08-13  Bruno Haible  <bruno@clisp.org>
-
-	Fix some test module descriptions.
-	* modules/boot-time-tests (Files): Add tests/macros.h.
-	* modules/dprintf-gnu-tests (Files): Likewise.
-	* modules/fclose-tests (Files): Likewise.
-	* modules/getcwd-tests (Files): Likewise.
-	* modules/lock-tests (Files): Likewise.
-	* modules/nullptr-c++-tests (Files): Likewise.
-	* modules/posix_spawn-tests (Files): Likewise.
-	* modules/posix_spawnp-tests (Files): Likewise.
-	* modules/readutmp-tests (Files): Likewise.
-	* modules/sh-quote-tests (Files): Likewise.
-	* modules/unigbrk/u16-grapheme-breaks-tests (Files): Likewise.
-	* modules/unigbrk/u16-grapheme-next-tests (Files): Likewise.
-	* modules/unigbrk/u16-grapheme-prev-tests (Files): Likewise.
-	* modules/unigbrk/u32-grapheme-breaks-tests (Files): Likewise.
-	* modules/unigbrk/u32-grapheme-next-tests (Files): Likewise.
-	* modules/unigbrk/u32-grapheme-prev-tests (Files): Likewise.
-	* modules/unigbrk/u8-grapheme-breaks-tests (Files): Likewise.
-	* modules/unigbrk/u8-grapheme-next-tests (Files): Likewise.
-	* modules/unigbrk/u8-grapheme-prev-tests (Files): Likewise.
-	* modules/unigbrk/uc-grapheme-breaks-tests (Files): Likewise.
-
-2023-08-13  Bruno Haible  <bruno@clisp.org>
-
-	nproc, physmem: Use sysctl() as a fallback on GNU/kFreeBSD.
-	* lib/nproc.c: Do include <sys/sysctl.h> on GNU/kFreeBSD.
-	(num_processors_ignoring_omp): Call sysctl on GNU/kFreeBSD.
-	* lib/physmem.c: Do include <sys/sysctl.h> on GNU/kFreeBSD.
-	(physmem_total, physmem_available): Call sysctl on GNU/kFreeBSD.
-
-2023-08-13  Bruno Haible  <bruno@clisp.org>
-
-	physmem: Add tests.
-	* tests/test-physmem.c: New file.
-	* modules/physmem-tests: New file.
-
-2023-08-13  Bruno Haible  <bruno@clisp.org>
-
-	readutmp, boot-time: Fix warning on glibc 2.30..2.31 on Linux.
-	Reported by PÃ¡draig Brady in
-	<https://lists.gnu.org/archive/html/bug-gnulib/2023-08/msg00110.html>.
-	* lib/readutmp.c: Don't include <sys/sysctl.h> on glibc/Linux.
-	* lib/boot-time.c: Likewise.
-
-2023-08-13  Paul Eggert  <eggert@cs.ucla.edu>
-
-	fts: improve memory-allocation errno handling
-	* lib/fts.c (fts_read, fts_build): When enter_dir or setup_dir
-	fails, report its errno value back to the user.
-	(internal_function): Preserve errno.
-	* modules/fts (Depends-on): Add calloc-posix, free-posix,
-	malloc-posix, and realloc-posix, for better errno handling
-	on allocation failures.
-
-	hash: set errno on failure
-	* lib/hash.c: Include errno.h.
-	(compute_bucket_size, hash_initialize, hash_rehash)
-	(hash_insert_if_absent): Set errno reliably on failure.
-	(hash_free): Preserve errno, like plain 'free'.
-	* modules/hash (Depends-on): Depend on calloc-posix,
-	free-posix, malloc-posix, so that errno is set reliably.
-
-2023-08-13  Bruno Haible  <bruno@clisp.org>
-
-	readutmp, boot-time: Fix compilation error on old Android.
-	Reported by Po Lu in
-	<https://lists.gnu.org/archive/html/bug-gnulib/2023-08/msg00108.html>.
-	* lib/readutmp.h (BOOT_TIME): Add fallback.
-
-2023-08-13  Bruno Haible  <bruno@clisp.org>
-
-	readutmp, boot-time: Fix compilation error on Android API 8.
-	Reported by Po Lu in
-	<https://lists.gnu.org/archive/html/bug-gnulib/2023-08/msg00108.html>.
-	* m4/readutmp.m4 (gl_PREREQ_READUTMP_H): Test whether sysinfo is
-	declared.
-	* lib/boot-time-aux.h (get_linux_uptime): Invoke sysinfo only if it is
-	declared.
-	* doc/glibc-functions/sysinfo.texi: Mention the Android problem.
-
-2023-08-13  Bruno Haible  <bruno@clisp.org>
-
-	readutmp, boot-time: Fix compilation error on old Android.
-	Reported by Po Lu in
-	<https://lists.gnu.org/archive/html/bug-gnulib/2023-08/msg00108.html>.
-	* lib/readutmp.c (endutent): New fallback declaration, for Android.
-	(getutent): Remove Ultrix workaround from 2000-04-05.
-	* lib/boot-time.c: Likewise.
-	* m4/readutmp.m4 (gl_PREREQ_READUTMP_H): Test whether endutent is
-	declared, not getutent.
-	* doc/glibc-functions/endutent.texi: Mention the Android bug.
-
 2023-08-12  Paul Eggert  <eggert@cs.ucla.edu>
 
 	boot-time,readutmp: do not depend on c-strtod
diff --git a/doc/glibc-functions/endutent.texi b/doc/glibc-functions/endutent.texi
index b4f3dd397a..5e12e23c44 100644
--- a/doc/glibc-functions/endutent.texi
+++ b/doc/glibc-functions/endutent.texi
@@ -28,7 +28,4 @@ Portability problems not fixed by Gnulib:
 @item
 This function is missing on some platforms:
 macOS 11.1, FreeBSD 13.0, OpenBSD 6.7, Minix 3.1.8, mingw, MSVC 14.
-@item
-This function is not declared on some platforms:
-Android before ca.@: 2015.
 @end itemize
diff --git a/doc/glibc-functions/sysinfo.texi b/doc/glibc-functions/sysinfo.texi
index 16e12b12ac..3b1ade31a6 100644
--- a/doc/glibc-functions/sysinfo.texi
+++ b/doc/glibc-functions/sysinfo.texi
@@ -17,7 +17,4 @@ Portability problems not fixed by Gnulib:
 @item
 This function is missing on some platforms:
 macOS 11.1, FreeBSD 13.0, NetBSD 9.0, OpenBSD 6.7, Minix 3.1.8, AIX 5.1, Cygwin 1.7.9, mingw, MSVC 14.
-@item
-This function is not declared and thus not part of the Android API
-for Android API levels < 9.
 @end itemize
diff --git a/lib/boot-time-aux.h b/lib/boot-time-aux.h
index e59a0fd03c..348611fc85 100644
--- a/lib/boot-time-aux.h
+++ b/lib/boot-time-aux.h
@@ -65,7 +65,6 @@ get_linux_uptime (struct timespec *p_uptime)
     }
 # endif
 
-# if HAVE_DECL_SYSINFO /* not available in Android API < 9 */
   /* The sysinfo call returns the uptime with a resolution of 1 sec only.  */
   struct sysinfo info;
   if (sysinfo (&info) >= 0)
@@ -74,7 +73,6 @@ get_linux_uptime (struct timespec *p_uptime)
       p_uptime->tv_nsec = 0;
       return 0;
     }
-# endif
 
   return -1;
 }
diff --git a/lib/boot-time.c b/lib/boot-time.c
index fe5b5b88c8..d813bfa582 100644
--- a/lib/boot-time.c
+++ b/lib/boot-time.c
@@ -32,7 +32,7 @@
 # include <time.h>
 #endif
 
-#if HAVE_SYS_SYSCTL_H && !(defined __GLIBC__ && defined __linux__) && !defined __minix
+#if HAVE_SYS_SYSCTL_H && !defined __minix
 # if HAVE_SYS_PARAM_H
 #  include <sys/param.h>
 # endif
@@ -65,10 +65,8 @@
 # define UT_USER(UT) ((UT)->ut_user)
 #endif
 
-#if !HAVE_UTMPX_H && HAVE_UTMP_H && defined UTMP_NAME_FUNCTION
-# if !HAVE_DECL_ENDUTENT /* Android */
-void endutent (void);
-# endif
+#if !HAVE_UTMPX_H && HAVE_UTMP_H && defined UTMP_NAME_FUNCTION && !HAVE_DECL_GETUTENT
+struct utmp *getutent (void);
 #endif
 
 #if defined __linux__ || HAVE_UTMPX_H || HAVE_UTMP_H || defined __CYGWIN__ || defined _WIN32
diff --git a/lib/fsusage.c b/lib/fsusage.c
index f6f4b1c35f..d30dd3f9fb 100644
--- a/lib/fsusage.c
+++ b/lib/fsusage.c
@@ -22,8 +22,7 @@
 
 #include <limits.h>
 #include <sys/types.h>
-
-#if STAT_STATVFS || STAT_STATVFS64 /* POSIX 1003.1-2001 (and later) with XSI */
+#if (STAT_STATVFS || STAT_STATVFS64) && ! _WIN32 /* POSIX 1003.1-2001 (and later) with XSI */
 # include <sys/statvfs.h>
 #else
 /* Don't include backward-compatibility files unless they're needed.
@@ -111,6 +110,22 @@ statvfs_works (void)
 int
 get_fs_usage (char const *file, char const *disk, struct fs_usage *fsp)
 {
+#ifdef _WIN32
+    char root[MAX_PATH+1];
+    
+    DWORD bytes_per_sector,free_clusters,total_clusters, flags, sectors_per_cluster, volume_serial_number;
+    GetVolumePathName (file, root, MAX_PATH+1);
+    GetVolumeInformation(root, NULL, 0, &volume_serial_number, NULL, NULL, fsp->fsu_fs_type, _MAX_PATH+1);
+    GetDiskFreeSpace(root, &sectors_per_cluster, &bytes_per_sector, &free_clusters, &total_clusters);
+    fsp->fsu_blocksize = bytes_per_sector;
+    fsp->fsu_blocks = sectors_per_cluster * total_clusters;
+    fsp->fsu_bfree = fsp->fsu_bavail = sectors_per_cluster * free_clusters;
+    fsp->fsu_bavail_top_bit_set = false;
+    fsp->fsu_files = fsp->fsu_ffree = 0;
+    fsp->fsu_namemax = MAX_PATH+1;
+    fsp->fsu_fsid = volume_serial_number;
+#else
+
 #ifdef STAT_STATVFS     /* POSIX, except pre-2.6.36 glibc/Linux */
 
   if (statvfs_works ())
@@ -131,6 +146,8 @@ get_fs_usage (char const *file, char const *disk, struct fs_usage *fsp)
       fsp->fsu_bavail_top_bit_set = EXTRACT_TOP_BIT (vfsd.f_bavail) != 0;
       fsp->fsu_files = PROPAGATE_ALL_ONES (vfsd.f_files);
       fsp->fsu_ffree = PROPAGATE_ALL_ONES (vfsd.f_ffree);
+      fsp->fsu_namemax = vfsd.f_namelen;
+      fsp->fsu_fsid = vfsd.f_fsid;
       return 0;
     }
 
@@ -144,6 +161,8 @@ get_fs_usage (char const *file, char const *disk, struct fs_usage *fsp)
     return -1;
 
   /* f_frsize isn't guaranteed to be supported.  */
+  fsp->fsu_namemax = fsd.f_namemax;
+  fsp->fsu_fsid = fsd.f_fsid;
   fsp->fsu_blocksize = (fsd.f_frsize
                         ? PROPAGATE_ALL_ONES (fsd.f_frsize)
                         : PROPAGATE_ALL_ONES (fsd.f_bsize));
@@ -156,6 +175,7 @@ get_fs_usage (char const *file, char const *disk, struct fs_usage *fsp)
     return -1;
 
   fsp->fsu_blocksize = PROPAGATE_ALL_ONES (fsd.f_fsize);
+  fsp->fsu_fs_type = fsd.f_type;
 
 #elif defined STAT_STATFS2_FRSIZE        /* 2.6 < glibc/Linux < 2.6.36 */
 
@@ -165,6 +185,7 @@ get_fs_usage (char const *file, char const *disk, struct fs_usage *fsp)
     return -1;
 
   fsp->fsu_blocksize = PROPAGATE_ALL_ONES (fsd.f_frsize);
+  fsp->fsu_fs_type = fsd.f_type;
 
 #elif defined STAT_STATFS2_BSIZE        /* glibc/Linux < 2.6, 4.3BSD, SunOS 4, \
                                            Mac OS X < 10.4, FreeBSD < 5.0, \
@@ -176,6 +197,7 @@ get_fs_usage (char const *file, char const *disk, struct fs_usage *fsp)
     return -1;
 
   fsp->fsu_blocksize = PROPAGATE_ALL_ONES (fsd.f_bsize);
+  fsp->fsu_fs_type = fsd.f_type;
 
 # ifdef STATFS_TRUNCATES_BLOCK_COUNTS
 
@@ -198,7 +220,7 @@ get_fs_usage (char const *file, char const *disk, struct fs_usage *fsp)
 
   if (statfs (file, &fsd) < 0)
     return -1;
-
+  fsp->fsu_fs_type = fsd.f_type;
   fsp->fsu_blocksize = PROPAGATE_ALL_ONES (fsd.f_fsize);
 
 #elif defined STAT_STATFS4              /* SVR3, old Irix */
@@ -207,7 +229,7 @@ get_fs_usage (char const *file, char const *disk, struct fs_usage *fsp)
 
   if (statfs (file, &fsd, sizeof fsd, 0) < 0)
     return -1;
-
+  fsp->fsu_fs_type = fsd.f_type;
   /* Empirically, the block counts on most SVR3 and SVR3-derived
      systems seem to always be in terms of 512-byte blocks,
      no matter what value f_bsize has.  */
@@ -227,7 +249,7 @@ get_fs_usage (char const *file, char const *disk, struct fs_usage *fsp)
   fsp->fsu_ffree = PROPAGATE_ALL_ONES (fsd.f_ffree);
 
 #endif
-
+#endif
   (void) disk;  /* avoid argument-unused warning */
   return 0;
 }
diff --git a/lib/fsusage.h b/lib/fsusage.h
index 9630b04e00..24cddb7e76 100644
--- a/lib/fsusage.h
+++ b/lib/fsusage.h
@@ -22,6 +22,17 @@
 # define FSUSAGE_H_
 
 # include <stdint.h>
+# include <stdbool.h>
+#ifdef _WIN32
+# include <stdlib.h>
+#endif
+#ifndef fsword
+# ifdef HAVE___FSWORD_T
+typedef __fsword_t fsword;
+# else
+typedef long int fsword;
+# endif
+#endif
 
 struct fs_usage
 {
@@ -32,8 +43,14 @@ struct fs_usage
   bool fsu_bavail_top_bit_set;  /* 1 if fsu_bavail represents a value < 0.  */
   uintmax_t fsu_files;          /* Total file nodes. */
   uintmax_t fsu_ffree;          /* Free file nodes. */
+  uintmax_t fsu_namemax;
+  uintmax_t fsu_fsid;
+#ifdef _WIN32
+  char fsu_fs_type[_MAX_PATH	+1];
+#else
+  fsword fsu_fs_type;
+#endif
 };
-
 int get_fs_usage (char const *file, char const *disk, struct fs_usage *fsp);
 
 #endif
diff --git a/lib/fts.c b/lib/fts.c
index faeb4b20a5..875fe05793 100644
--- a/lib/fts.c
+++ b/lib/fts.c
@@ -981,6 +981,7 @@ next:   tmp = p;
                         fts_load(sp, p);
                         if (! setup_dir(sp)) {
                                 free_dir(sp);
+                                __set_errno (ENOMEM);
                                 return (NULL);
                         }
                         goto check_for_dir;
@@ -1027,7 +1028,10 @@ check_for_dir:
                       sp->fts_dev = p->fts_statp->st_dev;
                     Dprintf (("  entering: %s\n", p->fts_path));
                     if (! enter_dir (sp, p))
-                      return NULL;
+                      {
+                        __set_errno (ENOMEM);
+                        return NULL;
+                      }
                   }
                 return p;
         }
@@ -1344,9 +1348,8 @@ fts_build (register FTS *sp, int type)
                   cur->fts_info = FTS_D;
                 else if (! enter_dir (sp, cur))
                   {
-                    int err = errno;
                     closedir_and_clear (cur->fts_dirp);
-                    __set_errno (err);
+                    __set_errno (ENOMEM);
                     return NULL;
                   }
               }
@@ -1934,7 +1937,6 @@ internal_function
 fts_lfree (register FTSENT *head)
 {
         register FTSENT *p;
-        int err = errno;
 
         /* Free a linked list of structures. */
         while ((p = head)) {
@@ -1943,8 +1945,6 @@ fts_lfree (register FTSENT *head)
                         closedir (p->fts_dirp);
                 free(p);
         }
-
-        __set_errno (err);
 }
 
 /*
diff --git a/lib/hash.c b/lib/hash.c
index a004885e28..918aa0d1c3 100644
--- a/lib/hash.c
+++ b/lib/hash.c
@@ -29,7 +29,6 @@
 #include "bitrotate.h"
 #include "xalloc-oversized.h"
 
-#include <errno.h>
 #include <stdint.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -500,17 +499,13 @@ compute_bucket_size (size_t candidate, const Hash_tuning *tuning)
     {
       float new_candidate = candidate / tuning->growth_threshold;
       if ((float) SIZE_MAX <= new_candidate)
-        goto nomem;
+        return 0;
       candidate = new_candidate;
     }
   candidate = next_prime (candidate);
   if (xalloc_oversized (candidate, sizeof (struct hash_entry *)))
-    goto nomem;
+    return 0;
   return candidate;
-
- nomem:
-  errno = ENOMEM;
-  return 0;
 }
 
 Hash_table *
@@ -539,7 +534,6 @@ hash_initialize (size_t candidate, const Hash_tuning *tuning,
          if the user provides invalid tuning options, we silently revert to
          using the defaults, and ignore further request to change the tuning
          options.  */
-      errno = EINVAL;
       goto fail;
     }
 
@@ -613,7 +607,6 @@ hash_free (Hash_table *table)
   struct hash_entry *bucket;
   struct hash_entry *cursor;
   struct hash_entry *next;
-  int err = errno;
 
   /* Call the user data_freer function.  */
   if (table->data_freer && table->n_entries)
@@ -656,8 +649,6 @@ hash_free (Hash_table *table)
   /* Free the remainder of the hash table structure.  */
   free (table->bucket);
   free (table);
-
-  errno = err;
 }
 
 /* Insertion and deletion.  */
@@ -771,8 +762,8 @@ hash_find_entry (Hash_table *table, const void *entry,
 /* Internal helper, to move entries from SRC to DST.  Both tables must
    share the same free entry list.  If SAFE, only move overflow
    entries, saving bucket heads for later, so that no allocations will
-   occur.  Return false (setting errno) if the free entry list is
-   exhausted and an allocation fails.  */
+   occur.  Return false if the free entry list is exhausted and an
+   allocation fails.  */
 
 static bool
 transfer_entries (Hash_table *dst, Hash_table *src, bool safe)
@@ -919,14 +910,12 @@ hash_rehash (Hash_table *table, size_t candidate)
      passes.  Two passes give worse cache performance and takes
      longer, but at this point, we're already out of memory, so slow
      and safe is better than failure.  */
-  int err = errno;
   table->free_entry_list = new_table->free_entry_list;
   if (! (transfer_entries (table, new_table, true)
          && transfer_entries (table, new_table, false)))
     abort ();
   /* table->n_entries already holds its value.  */
   free (new_table->bucket);
-  errno = err;
   return false;
 }
 
@@ -973,10 +962,7 @@ hash_insert_if_absent (Hash_table *table, void const *entry,
                 * tuning->growth_threshold));
 
           if ((float) SIZE_MAX <= candidate)
-            {
-              errno = ENOMEM;
-              return -1;
-            }
+            return -1;
 
           /* If the rehash fails, arrange to return NULL.  */
           if (!hash_rehash (table, candidate))
diff --git a/lib/hash.h b/lib/hash.h
index af07242ff4..54d3f22f69 100644
--- a/lib/hash.h
+++ b/lib/hash.h
@@ -148,7 +148,7 @@ typedef void (*Hash_data_freer) (void *entry);
 /* Reclaim all storage associated with a hash table.  If a data_freer
    function has been supplied by the user when the hash table was created,
    this function applies it to the data of each entry before freeing that
-   entry.  This function preserves errno, like 'free'.  */
+   entry.  */
 extern void hash_free (Hash_table *table);
 
 /* Allocate and return a new hash table, or NULL upon failure.  The initial
@@ -183,9 +183,7 @@ extern void hash_free (Hash_table *table);
    You should specify this function only if you want these functions to free
    all of your 'data' data.  This is typically the case when your data is
    simply an auxiliary struct that you have malloc'd to aggregate several
-   values.
-
-   Set errno on failure; otherwise errno is unspecified.  */
+   values.  */
 _GL_ATTRIBUTE_NODISCARD
 extern Hash_table *hash_initialize (size_t candidate,
                                     const Hash_tuning *tuning,
@@ -194,7 +192,7 @@ extern Hash_table *hash_initialize (size_t candidate,
                                     Hash_data_freer data_freer)
   _GL_ATTRIBUTE_MALLOC _GL_ATTRIBUTE_DEALLOC (hash_free, 1);
 
-/* Like hash_initialize, but invokes xalloc_die instead of returning NULL.  */
+/* Same as hash_initialize, but invokes xalloc_die on memory exhaustion.  */
 /* This function is defined by module 'xhash'.  */
 _GL_ATTRIBUTE_NODISCARD
 extern Hash_table *hash_xinitialize (size_t candidate,
@@ -220,26 +218,25 @@ extern void hash_clear (Hash_table *table);
    the table may receive at least CANDIDATE different user entries, including
    those already in the table, before any other growth of the hash table size
    occurs.  If TUNING->IS_N_BUCKETS is true, then CANDIDATE specifies the
-   exact number of buckets desired.  Return true iff the rehash succeeded,
-   false (setting errno) otherwise.  */
+   exact number of buckets desired.  Return true iff the rehash succeeded.  */
 _GL_ATTRIBUTE_NODISCARD
 extern bool hash_rehash (Hash_table *table, size_t candidate);
 
 /* If ENTRY matches an entry already in the hash table, return the pointer
    to the entry from the table.  Otherwise, insert ENTRY and return ENTRY.
-   Return NULL (setting errno) if the storage required for insertion
-   cannot be allocated.  This implementation does not support
-   duplicate entries or insertion of NULL.  */
+   Return NULL if the storage required for insertion cannot be allocated.
+   This implementation does not support duplicate entries or insertion of
+   NULL.  */
 _GL_ATTRIBUTE_NODISCARD
 extern void *hash_insert (Hash_table *table, const void *entry);
 
-/* Same as hash_insert, but invokes xalloc_die instead of returning NULL.  */
+/* Same as hash_insert, but invokes xalloc_die on memory exhaustion.  */
 /* This function is defined by module 'xhash'.  */
 extern void *hash_xinsert (Hash_table *table, const void *entry);
 
 /* Insert ENTRY into hash TABLE if there is not already a matching entry.
 
-   Return -1 (setting errno) upon memory allocation failure.
+   Return -1 upon memory allocation failure.
    Return 1 if insertion succeeded.
    Return 0 if there is already a matching entry in the table,
    and in that case, if MATCHED_ENT is non-NULL, set *MATCHED_ENT
diff --git a/lib/mountlist.c b/lib/mountlist.c
index 8b06e7b7ee..f7272bbdd7 100644
--- a/lib/mountlist.c
+++ b/lib/mountlist.c
@@ -187,6 +187,10 @@
    /* for Irix 6.5 */                           \
    || strcmp (Fs_type, "ignore") == 0)
 
+#ifdef _WIN32
+#undef MOUNTED_GETFSSTAT
+#endif
+
 /* Historically, we have marked as "dummy" any file system of type "none",
    but now that programs like du need to know about bind-mounted directories,
    we grant an exception to any with "bind" in its list of mount options.
@@ -466,6 +470,101 @@ read_file_system_list (bool need_fs_type)
   struct mount_entry *me;
   struct mount_entry **mtail = &mount_list;
   (void) need_fs_type;
+  #ifdef _WIN32
+    DWORD  CharCount            = 0;
+    char  DeviceName[MAX_PATH] = "";
+    DWORD  Error                = ERROR_SUCCESS;
+    HANDLE FindHandle           = INVALID_HANDLE_VALUE;
+    BOOL   Found                = FALSE;
+    size_t Index                = 0;
+    BOOL   Success              = FALSE;
+    char  VolumeName[MAX_PATH] = "";
+    char  MountPoint[MAX_PATH] = "";
+    FindHandle = FindFirstVolumeA(VolumeName, MAX_PATH);
+ if (FindHandle == INVALID_HANDLE_VALUE)
+    {
+        Error = GetLastError();
+        printf("FindFirstVolumeW failed with error code %d\n", Error);
+        return NULL;
+    }
+  int fakedevNum=3;
+    for (;;)
+    {
+        //
+        //  Skip the \\?\ prefix and remove the trailing backslash.
+        Index = strlen(VolumeName) - 1;
+
+        if (VolumeName[0]     != L'\\' ||
+            VolumeName[1]     != L'\\' ||
+            VolumeName[2]     != L'?'  ||
+            VolumeName[3]     != L'\\' ||
+            VolumeName[Index] != L'\\') 
+        {
+            Error = ERROR_BAD_PATHNAME;
+            printf("FindFirstVolumeW/FindNextVolumeW returned a bad path: %s\n", VolumeName);
+            break;
+        }
+
+        //
+        //  QueryDosDeviceW does not allow a trailing backslash,
+        //  so temporarily remove it.
+        VolumeName[Index] = L'\0';
+
+        CharCount = QueryDosDeviceA(&VolumeName[4], DeviceName, MAX_PATH); 
+
+        VolumeName[Index] = L'\\';
+
+        if ( CharCount == 0 ) 
+        {
+            Error = GetLastError();
+            printf("QueryDosDeviceW failed with error code %d\n", Error);
+            break;
+        }
+        Success = GetVolumePathNamesForVolumeNameA(
+            VolumeName, MountPoint, MAX_PATH, &CharCount
+        );
+        
+        if (Success && strlen(MountPoint) > 0){
+        me = xmalloc (sizeof *me);
+        me->me_type = "-";
+        me->me_type_malloced=0;
+        me->me_devname = xstrdup (DeviceName);
+        me->me_mountdir = xstrdup (MountPoint);//MountPoint contains all the names but each null teriminated
+        me->me_mntroot = NULL;
+        me->me_dev = (dev_t) fakedevNum++;
+        me->me_dummy = 0;
+        me->me_remote = 0;
+        
+          *mtail = me;
+          mtail = &me->me_next;
+        }
+        //
+        //  Move on to the next volume.
+        Success = FindNextVolumeA(FindHandle, VolumeName, MAX_PATH);
+
+        if ( !Success ) 
+        {
+            Error = GetLastError();
+
+            if (Error != ERROR_NO_MORE_FILES) 
+            {
+                printf("FindNextVolumeW failed with error code %d\n", Error);
+                break;
+            }
+
+            //
+            //  Finished iterating
+            //  through all the volumes.
+            Error = ERROR_SUCCESS;
+            break;
+        }
+    }
+
+    FindVolumeClose(FindHandle);
+    FindHandle = INVALID_HANDLE_VALUE;
+    *mtail = NULL;
+    return mount_list;
+  #endif
 
 #ifdef MOUNTED_GETMNTENT1       /* glibc, HP-UX, IRIX, Cygwin, Android,
                                    also (obsolete) 4.3BSD, SunOS */
diff --git a/lib/nproc.c b/lib/nproc.c
index e3de1873a9..2740c458c1 100644
--- a/lib/nproc.c
+++ b/lib/nproc.c
@@ -46,7 +46,7 @@
 # include <sys/param.h>
 #endif
 
-#if HAVE_SYS_SYSCTL_H && !(defined __GLIBC__ && defined __linux__)
+#if HAVE_SYS_SYSCTL_H && ! defined __GLIBC__
 # include <sys/sysctl.h>
 #endif
 
@@ -306,7 +306,7 @@ num_processors_ignoring_omp (enum nproc_query query)
   /* Finally, as fallback, use the APIs that don't distinguish between
      NPROC_CURRENT and NPROC_ALL.  */
 
-#if HAVE_SYSCTL && !(defined __GLIBC__ && defined __linux__) && defined HW_NCPU
+#if HAVE_SYSCTL && ! defined __GLIBC__ && defined HW_NCPU
   { /* This works on macOS, FreeBSD, NetBSD, OpenBSD.
        macOS 10.14 does not allow mib to be const.  */
     int nprocs;
diff --git a/lib/physmem.c b/lib/physmem.c
index 398f99b727..f450587141 100644
--- a/lib/physmem.c
+++ b/lib/physmem.c
@@ -50,7 +50,7 @@
 # include <sys/param.h>
 #endif
 
-#if HAVE_SYS_SYSCTL_H && !(defined __GLIBC__ && defined __linux__)
+#if HAVE_SYS_SYSCTL_H && ! defined __GLIBC__
 # include <sys/sysctl.h>
 #endif
 
@@ -96,7 +96,7 @@ double
 physmem_total (void)
 {
 #if defined _SC_PHYS_PAGES && defined _SC_PAGESIZE
-  { /* This works on linux-gnu, kfreebsd-gnu, solaris2, and cygwin.  */
+  { /* This works on linux-gnu, solaris2 and cygwin.  */
     double pages = sysconf (_SC_PHYS_PAGES);
     double pagesize = sysconf (_SC_PAGESIZE);
     if (0 <= pages && 0 <= pagesize)
@@ -153,8 +153,8 @@ physmem_total (void)
   }
 #endif
 
-#if HAVE_SYSCTL && !(defined __GLIBC__ && defined __linux__) && defined HW_PHYSMEM
-  { /* This works on *bsd, kfreebsd-gnu, and darwin.  */
+#if HAVE_SYSCTL && ! defined __GLIBC__ && defined HW_PHYSMEM
+  { /* This works on *bsd and darwin.  */
     unsigned int physmem;
     size_t len = sizeof physmem;
     static int mib[2] = { CTL_HW, HW_PHYSMEM };
@@ -208,7 +208,7 @@ double
 physmem_available (void)
 {
 #if defined _SC_AVPHYS_PAGES && defined _SC_PAGESIZE
-  { /* This works on linux-gnu, kfreebsd-gnu, solaris2, and cygwin.  */
+  { /* This works on linux-gnu, solaris2 and cygwin.  */
     double pages = sysconf (_SC_AVPHYS_PAGES);
     double pagesize = sysconf (_SC_PAGESIZE);
     if (0 <= pages && 0 <= pagesize)
@@ -267,8 +267,8 @@ physmem_available (void)
   }
 #endif
 
-#if HAVE_SYSCTL && !(defined __GLIBC__ && defined __linux__) && defined HW_USERMEM
-  { /* This works on *bsd, kfreebsd-gnu, and darwin.  */
+#if HAVE_SYSCTL && ! defined __GLIBC__ && defined HW_USERMEM
+  { /* This works on *bsd and darwin.  */
     unsigned int usermem;
     size_t len = sizeof usermem;
     static int mib[2] = { CTL_HW, HW_USERMEM };
diff --git a/lib/readutmp.c b/lib/readutmp.c
index 7967db60a8..ef9f0aff43 100644
--- a/lib/readutmp.c
+++ b/lib/readutmp.c
@@ -40,7 +40,7 @@
 # include <systemd/sd-login.h>
 #endif
 
-#if HAVE_SYS_SYSCTL_H && !(defined __GLIBC__ && defined __linux__) && !defined __minix
+#if HAVE_SYS_SYSCTL_H && !defined __minix
 # if HAVE_SYS_PARAM_H
 #  include <sys/param.h>
 # endif
@@ -314,11 +314,9 @@ have_boot_time (struct utmp_alloc a)
   return false;
 }
 
-#if !HAVE_UTMPX_H && HAVE_UTMP_H && defined UTMP_NAME_FUNCTION
-# if !HAVE_DECL_ENDUTENT /* Android */
-void endutent (void);
+# if !HAVE_UTMPX_H && HAVE_UTMP_H && defined UTMP_NAME_FUNCTION && !HAVE_DECL_GETUTENT
+struct utmp *getutent (void);
 # endif
-#endif
 
 static int
 read_utmp_from_file (char const *file, idx_t *n_entries, STRUCT_UTMP **utmp_buf,
diff --git a/lib/readutmp.h b/lib/readutmp.h
index 3ddecf3727..1cf588d265 100644
--- a/lib/readutmp.h
+++ b/lib/readutmp.h
@@ -136,18 +136,14 @@ enum { UT_HOST_SIZE = -1 };
 /* This is a near-copy of glibc's struct utmpx, which stops working
    after the year 2038.  Unlike the glibc version, struct utmpx32
    describes the file format even if time_t is 64 bits.  */
-#define _GL_UT_USER_SIZE  sizeof (((struct utmpx *) 0)->ut_user)
-#define _GL_UT_ID_SIZE    sizeof (((struct utmpx *) 0)->ut_id)
-#define _GL_UT_LINE_SIZE  sizeof (((struct utmpx *) 0)->ut_line)
-#define _GL_UT_HOST_SIZE  sizeof (((struct utmpx *) 0)->ut_host)
 struct utmpx32
 {
   short int ut_type;               /* Type of login.  */
   pid_t ut_pid;                    /* Process ID of login process.  */
-  char ut_line[_GL_UT_LINE_SIZE];  /* Devicename.  */
-  char ut_id[_GL_UT_ID_SIZE];      /* Inittab ID.  */
-  char ut_user[_GL_UT_USER_SIZE];  /* Username.  */
-  char ut_host[_GL_UT_HOST_SIZE];  /* Hostname for remote login. */
+  char ut_line[__UT_LINESIZE];     /* Devicename.  */
+  char ut_id[4];                   /* Inittab ID.  */
+  char ut_user[__UT_USERSIZE];     /* Username.  */
+  char ut_host[__UT_HOSTSIZE];     /* Hostname for remote login. */
   struct __exit_status ut_exit;    /* Exit status of a process marked
                                       as DEAD_PROCESS.  */
   /* The fields ut_session and ut_tv must be the same size when compiled
@@ -253,13 +249,6 @@ struct utmpx32
 # define WTMP_FILE "/etc/wtmp"
 #endif
 
-/* In early versions of Android, <utmp.h> did not define BOOT_TIME, only
-   USER_PROCESS.  We need to use the value that is defined in newer versions
-   of Android.  */
-#if defined __ANDROID__ && !defined BOOT_TIME
-# define BOOT_TIME 2
-#endif
-
 /* Some platforms, such as OpenBSD, don't have an ut_type field and don't have
    the BOOT_TIME and USER_PROCESS macros.  But we want to support them in
    'struct gl_utmp'.  */
diff --git a/m4/readutmp.m4 b/m4/readutmp.m4
index 0a47f4bb77..fff8d4eb7b 100644
--- a/m4/readutmp.m4
+++ b/m4/readutmp.m4
@@ -1,4 +1,4 @@
-# readutmp.m4 serial 30
+# readutmp.m4 serial 28
 dnl Copyright (C) 2002-2023 Free Software Foundation, Inc.
 dnl This file is free software; the Free Software Foundation
 dnl gives unlimited permission to copy and/or distribute it,
@@ -55,7 +55,7 @@ AC_DEFUN_ONCE([gl_PREREQ_READUTMP_H],
   if test $ac_cv_header_utmp_h = yes || test $ac_cv_header_utmpx_h = yes; then
     dnl Prerequisites of lib/readutmp.h and lib/readutmp.c.
     AC_CHECK_FUNCS_ONCE([utmpname utmpxname])
-    AC_CHECK_DECLS([endutent],,,[[
+    AC_CHECK_DECLS([getutent],,,[[
 /* <sys/types.h> is a prerequisite of <utmp.h> on FreeBSD 8.0, OpenBSD 4.6.  */
 #include <sys/types.h>
 #ifdef HAVE_UTMP_H
@@ -103,10 +103,6 @@ AC_INCLUDES_DEFAULT
     AC_CHECK_MEMBERS([struct utmp.ut_exit.e_termination],,,[$utmp_includes])
   fi
 
-  AC_CHECK_DECLS([sysinfo],,,[[
-    #include <sys/sysinfo.h>
-    ]])
-
   AC_CHECK_HEADERS_ONCE([sys/param.h])
   dnl <sys/sysctl.h> requires <sys/param.h> on OpenBSD 4.0.
   AC_CHECK_HEADERS([sys/sysctl.h],,,
diff --git a/m4/stdint.m4 b/m4/stdint.m4
index b9f764d4c1..d6961b0993 100644
--- a/m4/stdint.m4
+++ b/m4/stdint.m4
@@ -1,4 +1,4 @@
-# stdint.m4 serial 62
+# stdint.m4 serial 61
 dnl Copyright (C) 2001-2023 Free Software Foundation, Inc.
 dnl This file is free software; the Free Software Foundation
 dnl gives unlimited permission to copy and/or distribute it,
@@ -150,10 +150,7 @@ intmax_t i = INTMAX_MAX;
 uintmax_t j = UINTMAX_MAX;
 
 /* Check that SIZE_MAX has the correct type, if possible.  */
-/* ISO C 11 mandates _Generic, but GCC versions < 4.9 lack it.  */
-#if 201112 <= __STDC_VERSION__ \
-    && (!defined __GNUC__ || 4 < __GNUC__ + (9 <= __GNUC_MINOR__) \
-        || defined __clang__)
+#if 201112 <= __STDC_VERSION__
 int k = _Generic (SIZE_MAX, size_t: 0);
 #elif (2 <= __GNUC__ || 4 <= __clang_major__ || defined __IBM__TYPEOF__ \
        || (0x5110 <= __SUNPRO_C && !__STDC__))
diff --git a/modules/boot-time-tests b/modules/boot-time-tests
index 9436f0e8b5..bb56ee36e5 100644
--- a/modules/boot-time-tests
+++ b/modules/boot-time-tests
@@ -1,6 +1,5 @@
 Files:
 tests/test-boot-time.c
-tests/macros.h
 
 Depends-on:
 
diff --git a/modules/dprintf-gnu-tests b/modules/dprintf-gnu-tests
index 176d64c10c..117e615649 100644
--- a/modules/dprintf-gnu-tests
+++ b/modules/dprintf-gnu-tests
@@ -2,7 +2,6 @@ Files:
 tests/test-dprintf-gnu.sh
 tests/test-dprintf-gnu.c
 tests/test-printf-gnu.output
-tests/macros.h
 
 Depends-on:
 dprintf-posix-tests
diff --git a/modules/fclose-tests b/modules/fclose-tests
index 6e8ebe8343..0f36e0d50e 100644
--- a/modules/fclose-tests
+++ b/modules/fclose-tests
@@ -1,6 +1,5 @@
 Files:
 tests/test-fclose.c
-tests/macros.h
 
 Depends-on:
 fdopen
diff --git a/modules/fts b/modules/fts
index b754e0f572..fe56bae6e0 100644
--- a/modules/fts
+++ b/modules/fts
@@ -11,7 +11,6 @@ Depends-on:
 alignasof
 attribute
 c99
-calloc-posix
 closedir
 cycle-check
 d-ino
@@ -20,19 +19,16 @@ fchdir
 fcntl
 fcntl-h
 flexmember
-free-posix
 fstat
 hash
 i-ring
 lstat
-malloc-posix
 memmove
 open
 openat-h
 opendir
 opendirat
 readdir
-realloc-posix
 stdbool
 stddef
 stdint
diff --git a/modules/getcwd-tests b/modules/getcwd-tests
index 4a8aee2540..c842c77115 100644
--- a/modules/getcwd-tests
+++ b/modules/getcwd-tests
@@ -2,7 +2,6 @@ Files:
 tests/test-getcwd.sh
 tests/test-getcwd.c
 tests/qemu.h
-tests/macros.h
 
 Depends-on:
 errno
diff --git a/modules/hash b/modules/hash
index e837317d9f..42502e749e 100644
--- a/modules/hash
+++ b/modules/hash
@@ -7,9 +7,6 @@ lib/hash.h
 
 Depends-on:
 bitrotate
-calloc-posix
-free-posix
-malloc-posix
 stdbool
 stdint
 xalloc-oversized
diff --git a/modules/lock-tests b/modules/lock-tests
index 502c36882f..31d627da2a 100644
--- a/modules/lock-tests
+++ b/modules/lock-tests
@@ -3,7 +3,6 @@ tests/test-rwlock1.c
 tests/test-lock.c
 tests/test-once.c
 tests/atomic-int-gnulib.h
-tests/macros.h
 m4/semaphore.m4
 
 Depends-on:
diff --git a/modules/nullptr-c++-tests b/modules/nullptr-c++-tests
index 391881974d..ae60f4b360 100644
--- a/modules/nullptr-c++-tests
+++ b/modules/nullptr-c++-tests
@@ -1,6 +1,5 @@
 Files:
 tests/test-nullptr-c++.cc
-tests/macros.h
 
 Status:
 c++-test
diff --git a/modules/physmem-tests b/modules/physmem-tests
deleted file mode 100644
index c37c41cd7e..0000000000
--- a/modules/physmem-tests
+++ /dev/null
@@ -1,11 +0,0 @@
-Files:
-tests/test-physmem.c
-tests/macros.h
-
-Depends-on:
-
-configure.ac:
-
-Makefile.am:
-TESTS += test-physmem
-check_PROGRAMS += test-physmem
diff --git a/modules/posix_spawn-tests b/modules/posix_spawn-tests
index ef56cf6023..7d316c96f6 100644
--- a/modules/posix_spawn-tests
+++ b/modules/posix_spawn-tests
@@ -8,7 +8,6 @@ tests/executable-script
 tests/executable-script.sh
 tests/executable-shell-script
 tests/signature.h
-tests/macros.h
 
 Depends-on:
 posix_spawn_file_actions_init
diff --git a/modules/posix_spawnp-tests b/modules/posix_spawnp-tests
index 16369ff52f..4ac569e318 100644
--- a/modules/posix_spawnp-tests
+++ b/modules/posix_spawnp-tests
@@ -8,7 +8,6 @@ tests/executable-script
 tests/executable-script.sh
 tests/executable-shell-script
 tests/signature.h
-tests/macros.h
 
 Depends-on:
 posix_spawn_file_actions_init
diff --git a/modules/readutmp-tests b/modules/readutmp-tests
index c21fe9c4be..5543b30fac 100644
--- a/modules/readutmp-tests
+++ b/modules/readutmp-tests
@@ -1,6 +1,5 @@
 Files:
 tests/test-readutmp.c
-tests/macros.h
 
 Depends-on:
 array-mergesort
diff --git a/modules/sh-quote-tests b/modules/sh-quote-tests
index 1d72a1899d..b2eccc58c7 100644
--- a/modules/sh-quote-tests
+++ b/modules/sh-quote-tests
@@ -1,6 +1,5 @@
 Files:
 tests/test-sh-quote.c
-tests/macros.h
 
 Depends-on:
 
diff --git a/modules/unigbrk/u16-grapheme-breaks-tests b/modules/unigbrk/u16-grapheme-breaks-tests
index 4051d3cdea..9f7f2dffef 100644
--- a/modules/unigbrk/u16-grapheme-breaks-tests
+++ b/modules/unigbrk/u16-grapheme-breaks-tests
@@ -1,6 +1,5 @@
 Files:
 tests/unigbrk/test-u16-grapheme-breaks.c
-tests/macros.h
 
 Depends-on:
 
diff --git a/modules/unigbrk/u16-grapheme-next-tests b/modules/unigbrk/u16-grapheme-next-tests
index 724f37d858..a947afe3f3 100644
--- a/modules/unigbrk/u16-grapheme-next-tests
+++ b/modules/unigbrk/u16-grapheme-next-tests
@@ -1,6 +1,5 @@
 Files:
 tests/unigbrk/test-u16-grapheme-next.c
-tests/macros.h
 
 Depends-on:
 
diff --git a/modules/unigbrk/u16-grapheme-prev-tests b/modules/unigbrk/u16-grapheme-prev-tests
index 1f126032de..be62d2468a 100644
--- a/modules/unigbrk/u16-grapheme-prev-tests
+++ b/modules/unigbrk/u16-grapheme-prev-tests
@@ -1,6 +1,5 @@
 Files:
 tests/unigbrk/test-u16-grapheme-prev.c
-tests/macros.h
 
 Depends-on:
 
diff --git a/modules/unigbrk/u32-grapheme-breaks-tests b/modules/unigbrk/u32-grapheme-breaks-tests
index 50119c8b5d..4561344744 100644
--- a/modules/unigbrk/u32-grapheme-breaks-tests
+++ b/modules/unigbrk/u32-grapheme-breaks-tests
@@ -1,6 +1,5 @@
 Files:
 tests/unigbrk/test-u32-grapheme-breaks.c
-tests/macros.h
 
 Depends-on:
 
diff --git a/modules/unigbrk/u32-grapheme-next-tests b/modules/unigbrk/u32-grapheme-next-tests
index a5e5d8b887..4ed8b1f94e 100644
--- a/modules/unigbrk/u32-grapheme-next-tests
+++ b/modules/unigbrk/u32-grapheme-next-tests
@@ -1,6 +1,5 @@
 Files:
 tests/unigbrk/test-u32-grapheme-next.c
-tests/macros.h
 
 Depends-on:
 
diff --git a/modules/unigbrk/u32-grapheme-prev-tests b/modules/unigbrk/u32-grapheme-prev-tests
index ac76585b0b..0900722791 100644
--- a/modules/unigbrk/u32-grapheme-prev-tests
+++ b/modules/unigbrk/u32-grapheme-prev-tests
@@ -1,6 +1,5 @@
 Files:
 tests/unigbrk/test-u32-grapheme-prev.c
-tests/macros.h
 
 Depends-on:
 
diff --git a/modules/unigbrk/u8-grapheme-breaks-tests b/modules/unigbrk/u8-grapheme-breaks-tests
index a9e6991ce3..7d1f6d98d5 100644
--- a/modules/unigbrk/u8-grapheme-breaks-tests
+++ b/modules/unigbrk/u8-grapheme-breaks-tests
@@ -1,6 +1,5 @@
 Files:
 tests/unigbrk/test-u8-grapheme-breaks.c
-tests/macros.h
 
 Depends-on:
 
diff --git a/modules/unigbrk/u8-grapheme-next-tests b/modules/unigbrk/u8-grapheme-next-tests
index 2c676c61f1..d30709ea63 100644
--- a/modules/unigbrk/u8-grapheme-next-tests
+++ b/modules/unigbrk/u8-grapheme-next-tests
@@ -1,6 +1,5 @@
 Files:
 tests/unigbrk/test-u8-grapheme-next.c
-tests/macros.h
 
 Depends-on:
 
diff --git a/modules/unigbrk/u8-grapheme-prev-tests b/modules/unigbrk/u8-grapheme-prev-tests
index 7c830946cf..137e8464f7 100644
--- a/modules/unigbrk/u8-grapheme-prev-tests
+++ b/modules/unigbrk/u8-grapheme-prev-tests
@@ -1,6 +1,5 @@
 Files:
 tests/unigbrk/test-u8-grapheme-prev.c
-tests/macros.h
 
 Depends-on:
 
diff --git a/modules/unigbrk/uc-grapheme-breaks-tests b/modules/unigbrk/uc-grapheme-breaks-tests
index 2b0493930e..3c211ff5cb 100644
--- a/modules/unigbrk/uc-grapheme-breaks-tests
+++ b/modules/unigbrk/uc-grapheme-breaks-tests
@@ -2,7 +2,6 @@ Files:
 tests/unigbrk/test-uc-grapheme-breaks.c
 tests/unigbrk/test-uc-grapheme-breaks.sh
 tests/unigbrk/GraphemeBreakTest.txt
-tests/macros.h
 
 Depends-on:
 
diff --git a/tests/test-physmem.c b/tests/test-physmem.c
deleted file mode 100644
index 232cc86d12..0000000000
--- a/tests/test-physmem.c
+++ /dev/null
@@ -1,38 +0,0 @@
-/* Test of getting the amount of total/available physical memory.
-   Copyright (C) 2023 Free Software Foundation, Inc.
-
-   This file is free software: you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published
-   by the Free Software Foundation, either version 3 of the License,
-   or (at your option) any later version.
-
-   This file is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */
-
-/* Written by Bruno Haible <bruno@clisp.org>, 2023.  */
-
-#include <config.h>
-
-#include "physmem.h"
-
-#include <stdio.h>
-
-#include "macros.h"
-
-int
-main (int argc, char *argv[])
-{
-  printf ("Total memory:     %12.f B = %6.f MiB\n",
-          physmem_total (), physmem_total () / (1024.0 * 1024.0));
-  printf ("Available memory: %12.f B = %6.f MiB\n",
-          physmem_available (), physmem_available () / (1024.0 * 1024.0));
-  ASSERT (physmem_total () >= physmem_available ());
-  ASSERT (physmem_available () >= 4 * 1024 * 1024);
-
-  return 0;
-}
